<?php

namespace FUxCon2013\ProjectsBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

use Symfony\Component\Security\Acl\Permission\MaskBuilder;

use FUxCon2013\ProjectsBundle\Entity\Project;
use FUxCon2013\ProjectsBundle\Form\ProjectType;
use FUxCon2013\ProjectsBundle\Entity\ProjectRepository;

class ProjectsController extends Controller
{
  const NO_COL = 3;
  const PAGE_SIZE = 5;

  /**
   * @Route("/", defaults={"offset" = 1, "tag" = null})
   * @Route("/page:{offset}", name="_projects")
   * @Route("/page:{offset}/tag:{tag}", defaults={"offset" = 1, "tag" = null}, name="_tag")
   * @Template()
   */
  function indexAction(Request $request, $offset = 1, $tag = null)
  {
    $limit = 10;
    $from  = (($offset * $limit) - $limit);

    $totalCount = $this->count();
    $totalPages = ceil($totalCount / $limit); 

    $projects = $this->findPaginated($from, $limit);

    foreach ($projects as $i => $project) {
      $col = $i % self::NO_COL;
      $columns[$col][] = $project;
    }

    $vars = array(
      'columns' => $columns,
      'width' => 12 / self::NO_COL,
      'page' => $offset,
      'totalPages' => $totalPages,
    );

    return $vars;
  }

  /**
  * @Route("/view/{id}", name="_project")
  * @Template()
  */
  function viewAction(Request $request, $id = 1)
  {
    $em = $this
        ->getDoctrine()
        ->getManager();

    $project = $em
        ->getRepository('FUxCon2013ProjectsBundle:Project')
        ->find($id);

    $tagManager = $this->get('fpn_tag.tag_manager');
    $tagManager->loadTagging($project);

    $project->dates = '';

    $startDate = $project->getStartDate()->format('m/Y');

    if ('11/-0001' != $startDate) {
      $project->dates = $startDate;
    }
    $endDate = $project->getEndDate()->format('m/Y');
    if ('11/-0001' != $endDate) {
      if (!empty($project->dates)) {
        $project->dates .= ' ';
      }
      $project->dates .= 'bis ' . $endDate;
    }
    else
    if (!empty($project->dates)) {
      $project->dates = 'seit ' . $project->dates;
    }

    return array(
      'project' => $project
    );
  }
  
  /**
   * Creates a new Project entity.
   *
   * @Route("/", name="project_create")
   * @Method("POST")
   * @Template("FUxCon2013ProjectsBundle:Project:new.html.twig")
   */
  public function createAction(Request $request)
  {
      $project  = new Project();
      $form = $this->createForm(new ProjectType(), $project);
      $form->bind($request);

      if ($form->isValid()) {
          $em = $this->getDoctrine()->getManager();
          $em->persist($project);
          $em->flush();
          $this->get('problematic.acl_manager')
            ->setObjectPermission(
              $project, MaskBuilder::MASK_OWNER, $project->getUser()
            );

          return $this->redirect($this->generateUrl('project_show', array('id' => $entity->getId())));
      }

      return array(
          'entity' => $project,
          'form'   => $form->createView(),
      );
  }

  /**
   * Displays a form to create a new Project entity.
   *
   * @Route("/new", name="project_new")
   * @Method("GET")
   * @Template()
   */
  public function newAction()
  {
      $project = new Project();
      $form   = $this->createForm(new ProjectType(), $project);

      return array(
          'entity' => $project,
          'form'   => $form->createView(),
      );
  }

  /**
   * Displays a form to edit an existing Project entity.
   *
   * @Route("/{id}/edit", name="project_edit")
   * @Method("GET")
   * @Template()
   */
  public function editAction($id)
  {
      $em = $this->getDoctrine()->getManager();

      $project = $em->getRepository('FUxCon2013ProjectsBundle:Project')->find($id);

      if (!$project) {
          throw $this->createNotFoundException('Unable to find Project entity.');
      }

      $editForm = $this->createForm(new ProjectType(), $project);

      return array(
          'entity'      => $project,
          'edit_form'   => $editForm->createView(),
      );
  }

  /**
   * Edits an existing Project entity.
   *
   * @Route("/{id}", name="project_update")
   * @Method("PUT")
   * @Template("FUxCon2013ProjectsBundle:Project:edit.html.twig")
   */
  public function updateAction(Request $request, $id)
  {
      $em = $this->getDoctrine()->getManager();

      $project = $em->getRepository('FUxCon2013ProjectsBundle:Project')->find($id);

      if (!$project) {
          throw $this->createNotFoundException('Unable to find Project entity.');
      }

      $editForm = $this->createForm(new ProjectType(), $project);
      $editForm->bind($request);

      if ($editForm->isValid()) {
          $em->persist($project);
          $em->flush();
          $this->get('problematic.acl_manager')
            ->setObjectPermission(
              $project, MaskBuilder::MASK_OWNER, $project->getUser()
            );

          return $this->redirect($this->generateUrl('project_edit', array('id' => $id)));
      }

      return array(
          'entity'      => $project,
          'edit_form'   => $editForm->createView(),
      );
  }
  
}
